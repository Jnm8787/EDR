{"ast":null,"code":"var _jsxFileName = \"/Users/josenmolinapaez/projects/EDR/src/components/Directory.js\";\nimport React, { Component } from \"react\";\nimport Employees from \"./Employees.js\";\nimport Search from \"./Search.js\";\nimport API from \"../utils/API\";\nimport \"../styles/Directory.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass Directory extends Component {\n  constructor(...args) {\n    super(...args);\n    this.state = {\n      employees: [],\n      empSort: [],\n      search: \"\",\n      sorted: false\n    };\n\n    this.componentDidMount = () => {\n      API.getUsers().then(results => {\n        this.setState({\n          employees: results.data.results\n        });\n      });\n    };\n\n    this.sortEmp = () => {\n      let {\n        employees,\n        search\n      } = this.state;\n      let empSort = employees.filter(sorted => {\n        return sorted.name.first.toLowerCase().includes(search.toLowerCase()) || sorted.name.last.toLowerCase().includes(search.toLowerCase()) || sorted.email.toLowerCase().includes(search.toLowerCase());\n      });\n      this.setState({\n        empSort\n      });\n    };\n\n    this.startSort = event => {\n      this.setState({\n        search: event.target.value\n      }, () => {\n        this.sortEmp();\n        this.setState({\n          sorted: true\n        });\n      });\n    };\n\n    this.render = () => {\n      return /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"background\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"jumbotron jumbotron-fluid\",\n          children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n            className: \"display-4\",\n            children: \"Employee Directory\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n            children: \" Search for an employee by entering their name or email below.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 52,\n            columnNumber: 11\n          }, this), /*#__PURE__*/_jsxDEV(Search, {\n            name: \"search\",\n            startSort: this.startSort,\n            label: \"Search\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 53,\n            columnNumber: 11\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"container-fluid\",\n          children: /*#__PURE__*/_jsxDEV(\"table\", {\n            className: \"table table-dark table-striped table-hover table-bordered table-condensed\",\n            children: [/*#__PURE__*/_jsxDEV(\"thead\", {\n              className: \"thead\",\n              children: /*#__PURE__*/_jsxDEV(\"tr\", {\n                children: [/*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Image\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 60,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Name\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 61,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Email\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 62,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Phone\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 63,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Date of Birth\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 64,\n                  columnNumber: 17\n                }, this), /*#__PURE__*/_jsxDEV(\"th\", {\n                  children: \"Address\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 65,\n                  columnNumber: 17\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 59,\n                columnNumber: 15\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 13\n            }, this), /*#__PURE__*/_jsxDEV(\"tbody\", {\n              children: // If user has not entered any search input, sort employees by UUID\n              !this.state.sorted ? this.state.employees.map(employee => /*#__PURE__*/_jsxDEV(Employees, {\n                firstName: employee.name.first,\n                lastName: employee.name.last,\n                phone: employee.phone,\n                email: employee.email,\n                icon: employee.picture.medium,\n                dob: employee.dob.date,\n                address: employee.location.street.number + \" \" + employee.location.street.name + \", \" + employee.location.city + \", \" + employee.location.state + \" \" + employee.location.postcode\n              }, employee.id.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 73,\n                columnNumber: 23\n              }, this)) : // sort users by UUID if the user has entered a search\n              this.state.empSort.map(employee => /*#__PURE__*/_jsxDEV(Employees, {\n                firstName: employee.name.first,\n                lastName: employee.name.last,\n                phone: employee.phone,\n                email: employee.email,\n                icon: employee.picture.medium,\n                dob: employee.dob.date,\n                address: employee.location.street.number + employee.location.street.name\n              }, employee.id.value, false, {\n                fileName: _jsxFileName,\n                lineNumber: 96,\n                columnNumber: 23\n              }, this))\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 68,\n              columnNumber: 13\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 57,\n            columnNumber: 11\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 7\n      }, this);\n    };\n  }\n\n}\n\nexport default Directory;","map":{"version":3,"sources":["/Users/josenmolinapaez/projects/EDR/src/components/Directory.js"],"names":["React","Component","Employees","Search","API","Directory","state","employees","empSort","search","sorted","componentDidMount","getUsers","then","results","setState","data","sortEmp","filter","name","first","toLowerCase","includes","last","email","startSort","event","target","value","render","map","employee","phone","picture","medium","dob","date","location","street","number","city","postcode","id"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport Employees from \"./Employees.js\";\nimport Search from \"./Search.js\";\nimport API from \"../utils/API\";\nimport \"../styles/Directory.css\";\n\nclass Directory extends Component {\n  state = {\n    employees: [],\n    empSort: [],\n    search: \"\",\n    sorted: false,\n  };\n\n  // check that the component rendered at least once, and pull in our data\n  // wait for the information to come back\n  componentDidMount = () => {\n    API.getUsers().then((results) => {\n      this.setState({\n        employees: results.data.results,\n      });\n    });\n  };\n\n  // sort through employees based on search term\n  // check if there is a match and set that to empSort for rendering\n  sortEmp = () => {\n    let { employees, search } = this.state;\n    let empSort = employees.filter((sorted) => {\n      return (\n        sorted.name.first.toLowerCase().includes(search.toLowerCase()) ||\n        sorted.name.last.toLowerCase().includes(search.toLowerCase()) ||\n        sorted.email.toLowerCase().includes(search.toLowerCase())\n      );\n    });\n    this.setState({ empSort });\n  };\n\n  // grab search term, activate sorted\n  startSort = (event) => {\n    this.setState({ search: event.target.value }, () => {\n      this.sortEmp();\n      this.setState({ sorted: true });\n    });\n  };\n\n  render = () => {\n    return (\n      <div className=\"background\">\n        <div className=\"jumbotron jumbotron-fluid\">\n          <h2 className=\"display-4\">Employee Directory</h2>\n          <p> Search for an employee by entering their name or email below.</p>\n          <Search name=\"search\" startSort={this.startSort} label=\"Search\" />\n        </div>\n\n        <div className=\"container-fluid\">\n          <table className=\"table table-dark table-striped table-hover table-bordered table-condensed\">\n            <thead className=\"thead\">\n              <tr>\n                <th>Image</th>\n                <th>Name</th>\n                <th>Email</th>\n                <th>Phone</th>\n                <th>Date of Birth</th>\n                <th>Address</th>\n              </tr>\n            </thead>\n            <tbody>\n              {\n                // If user has not entered any search input, sort employees by UUID\n                !this.state.sorted\n                  ? this.state.employees.map((employee) => (\n                      <Employees\n                        key={employee.id.value}\n                        firstName={employee.name.first}\n                        lastName={employee.name.last}\n                        phone={employee.phone}\n                        email={employee.email}\n                        icon={employee.picture.medium}\n                        dob={employee.dob.date}\n                        address={\n                          employee.location.street.number +\n                          \" \" +\n                          employee.location.street.name +\n                          \", \" +\n                          employee.location.city +\n                          \", \" +\n                          employee.location.state +\n                          \" \" +\n                          employee.location.postcode\n                        }\n                      />\n                    ))\n                  : // sort users by UUID if the user has entered a search\n                    this.state.empSort.map((employee) => (\n                      <Employees\n                        key={employee.id.value}\n                        firstName={employee.name.first}\n                        lastName={employee.name.last}\n                        phone={employee.phone}\n                        email={employee.email}\n                        icon={employee.picture.medium}\n                        dob={employee.dob.date}\n                        address={\n                          employee.location.street.number +\n                          employee.location.street.name\n                        }\n                      />\n                    ))\n              }\n            </tbody>\n          </table>\n        </div>\n      </div>\n    );\n  };\n}\n\nexport default Directory;\n"]},"metadata":{},"sourceType":"module"}